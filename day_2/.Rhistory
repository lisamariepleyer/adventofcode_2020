lines (pasturec1, col="springgreen1")
lines (pasturec2, col="springgreen1")
lines (extensive, type="o", col="skyblue3")
lines (extensivec1, col="skyblue1")
lines (extensivec2, col="skyblue1")
(-2.5,2,5)
(-2.5:2,5)
(-2.5:2.5)
fallow <- function (x) {1.5199*x+4.9119}
fallowc1 <- function (x) {1.34329*x+4.70424}
fallowc2 <- function (x) {1.69651*x+5.11956}
pasture <- function (x) {1.669*x+4.261}
pasturec1 <- function (x) {1.48203*x+4.07409}
pasturec2 <- function (x) {1.85597*x+4.44791}
extensive <- function (x) {2.3614*x+4.9206}
extensivec1 <- function (x) {2.06229*x+4.58848}
extensivec2 <- function (x) {2.66051*x+5.25272}
fallow <- fallow (-2.5:2.5)
fallowc1 <- fallowc1 (-2.5:2.5)
fallowc2 <- fallowc2 (-2.5:2.5)
pasture <- pasture (-2.5:2.5)
pasturec1 <- pasturec1 (-2.5:2.5)
pasturec2 <- pasturec2 (-2.5:2.5)
extensive <- extensive (-2.5:2.5)
extensivec1 <- extensivec1 (-2.5:2.5)
extensivec2 <- extensivec2 (-2.5:2.5)
plot (fallow, type="o", col="navajowhite2", ylab="butterfly sightings (BC)", xlab="nectar flower abundance")
lines (fallowc1, col="moccasin")
lines (fallowc2, col="moccasin")
lines (pasture, type="o", col="springgreen3")
lines (pasturec1, col="springgreen1")
lines (pasturec2, col="springgreen1")
lines (extensive, type="o", col="skyblue3")
lines (extensivec1, col="skyblue1")
lines (extensivec2, col="skyblue1")
axis(1,at=1:6, labels=(-2.5:2.5))
plot (fallow, xaxt="n",type="o", col="navajowhite2", ylab="butterfly sightings (BC)", xlab="nectar flower abundance")
lines (fallowc1, col="moccasin")
lines (fallowc2, col="moccasin")
lines (pasture, type="o", col="springgreen3")
lines (pasturec1, col="springgreen1")
lines (pasturec2, col="springgreen1")
lines (extensive, type="o", col="skyblue3")
lines (extensivec1, col="skyblue1")
lines (extensivec2, col="skyblue1")
axis(1,at=1:6, labels=(-2.5:2.5))
plot (fallow, legend=TRUE, xaxt="n",type="o", col="navajowhite2", ylab="butterfly sightings (BC)", xlab="nectar flower abundance")
fallow <- function (x) {1.5199*x+4.9119}
fallowc1 <- function (x) {1.34329*x+4.70424}
fallowc2 <- function (x) {1.69651*x+5.11956}
pasture <- function (x) {1.669*x+4.261}
pasturec1 <- function (x) {1.48203*x+4.07409}
pasturec2 <- function (x) {1.85597*x+4.44791}
extensive <- function (x) {2.3614*x+4.9206}
extensivec1 <- function (x) {2.06229*x+4.58848}
extensivec2 <- function (x) {2.66051*x+5.25272}
fallow <- fallow (-2.5:2.5)
fallowc1 <- fallowc1 (-2.5:2.5)
fallowc2 <- fallowc2 (-2.5:2.5)
pasture <- pasture (-2.5:2.5)
pasturec1 <- pasturec1 (-2.5:2.5)
pasturec2 <- pasturec2 (-2.5:2.5)
extensive <- extensive (-2.5:2.5)
extensivec1 <- extensivec1 (-2.5:2.5)
extensivec2 <- extensivec2 (-2.5:2.5)
plot (fallow, xaxt="n",type="o", col="navajowhite2", ylab="butterfly sightings (BC)", xlab="nectar flower abundance")
lines (fallowc1, col="moccasin")
lines (fallowc2, col="moccasin")
lines (pasture, type="o", col="springgreen3")
lines (pasturec1, col="springgreen1")
lines (pasturec2, col="springgreen1")
lines (extensive, type="o", col="skyblue3")
lines (extensivec1, col="skyblue1")
lines (extensivec2, col="skyblue1")
axis(1,at=1:6, labels=(-2.5:2.5))
legend (legend=x("fallow","pasture","extensive"), col=c("navajowhite", "springgreen3","skyblue3"))
legend (legend=c("fallow","pasture","extensive"), col=c("navajowhite", "springgreen3","skyblue3"))
fallow <- function (x) {1.5199*x+4.9119}
fallowc1 <- function (x) {1.34329*x+4.70424}
fallowc2 <- function (x) {1.69651*x+5.11956}
pasture <- function (x) {1.669*x+4.261}
pasturec1 <- function (x) {1.48203*x+4.07409}
pasturec2 <- function (x) {1.85597*x+4.44791}
extensive <- function (x) {2.3614*x+4.9206}
extensivec1 <- function (x) {2.06229*x+4.58848}
extensivec2 <- function (x) {2.66051*x+5.25272}
fallow <- fallow (-2.5:2.5)
fallowc1 <- fallowc1 (-2.5:2.5)
fallowc2 <- fallowc2 (-2.5:2.5)
pasture <- pasture (-2.5:2.5)
pasturec1 <- pasturec1 (-2.5:2.5)
pasturec2 <- pasturec2 (-2.5:2.5)
extensive <- extensive (-2.5:2.5)
extensivec1 <- extensivec1 (-2.5:2.5)
extensivec2 <- extensivec2 (-2.5:2.5)
plot (fallow, xaxt="n",type="o", col="navajowhite2", ylab="butterfly sightings (BC)", xlab="nectar flower abundance")
lines (fallowc1, col="moccasin")
lines (fallowc2, col="moccasin")
lines (pasture, type="o", col="springgreen3")
lines (pasturec1, col="springgreen1")
lines (pasturec2, col="springgreen1")
lines (extensive, type="o", col="skyblue3")
lines (extensivec1, col="skyblue1")
lines (extensivec2, col="skyblue1")
axis(1,at=1:6, labels=(-2.5:2.5))
legend (legend=c("fallow","pasture","extensive"), col=c("navajowhite", "springgreen3","skyblue3"))
legend (1,8,legend=c("fallow","pasture","extensive"), col=c("navajowhite", "springgreen3","skyblue3"))
legend (1,8,legend=c("fallow","pasture","extensive"), col=c("navajowhite", "springgreen3","skyblue3"), lty=1:2,)
legend (1,8,legend=c("fallow","pasture","extensive"), col=c("navajowhite", "springgreen3","skyblue3"), lty=1)
fallow <- function (x) {1.5199*x+4.9119}
fallowc1 <- function (x) {1.34329*x+4.70424}
fallowc2 <- function (x) {1.69651*x+5.11956}
pasture <- function (x) {1.669*x+4.261}
pasturec1 <- function (x) {1.48203*x+4.07409}
pasturec2 <- function (x) {1.85597*x+4.44791}
extensive <- function (x) {2.3614*x+4.9206}
extensivec1 <- function (x) {2.06229*x+4.58848}
extensivec2 <- function (x) {2.66051*x+5.25272}
fallow <- fallow (-2.5:2.5)
fallowc1 <- fallowc1 (-2.5:2.5)
fallowc2 <- fallowc2 (-2.5:2.5)
pasture <- pasture (-2.5:2.5)
pasturec1 <- pasturec1 (-2.5:2.5)
pasturec2 <- pasturec2 (-2.5:2.5)
extensive <- extensive (-2.5:2.5)
extensivec1 <- extensivec1 (-2.5:2.5)
extensivec2 <- extensivec2 (-2.5:2.5)
plot (fallow, xaxt="n",type="o", col="navajowhite2", ylab="butterfly sightings (BC)", xlab="nectar flower abundance")
lines (fallowc1, col="moccasin")
lines (fallowc2, col="moccasin")
lines (pasture, type="o", col="springgreen3")
lines (pasturec1, col="springgreen1")
lines (pasturec2, col="springgreen1")
lines (extensive, type="o", col="skyblue3")
lines (extensivec1, col="skyblue1")
lines (extensivec2, col="skyblue1")
axis(1,at=1:6, labels=(-2.5:2.5))
legend (1,8,legend=c("fallow","pasture","extensive"), col=c("navajowhite", "springgreen3","skyblue3"), lty=1)
source('~/Documents/Uni/Master/MasterESB/2SESB/UE Practical Data Analysis/exam/example3/R.R')
data <- fread('input.txt')
setwd('Documents/githubprojects/adventofcode_2020/day_2/')
data <- fread('input.txt')
library(data.table)
data <- fread('input.txt')
data
data <- fread('input.txt', header = F)
data
colnames(data) <- c('range', 'letter', 'password')
data
strsplit(data$range, '-')
lengths(strsplit(data$range, '-'))
unique(lengths(strsplit(data$range, '-')))
# make sure all ranges contain 2 numbers
# unique(lengths(strsplit(data$range, '-')))
strsplit(data$range, '-')
# make sure all ranges contain 2 numbers
# unique(lengths(strsplit(data$range, '-')))
data.table(strsplit(data$range, '-'))
# make sure all ranges contain 2 numbers
# unique(lengths(strsplit(data$range, '-')))
data[, c("min", "max") := strsplit(range, "_")]
# make sure all ranges contain 2 numbers
# unique(lengths(strsplit(data$range, '-')))
data[, c("min", "max") := tstrsplit(range, "_")]
data
# make sure all ranges contain 2 numbers
# unique(lengths(strsplit(data$range, '-')))
data[, c("min", "max") := tstrsplit(range, "_", fixed=TRUE)]
data
# make sure all ranges contain 2 numbers
# unique(lengths(strsplit(data$range, '-')))
data[, c("min", "max") := tstrsplit(range, "-")]
data
data
strsplit(data$letter)
strsplit(data$letter, '')
# make sure letter column contains only one letter
sapply(strsplit(data$letter, ''), "[[", 2)
# make sure letter column contains only one letter
unique(sapply(strsplit(data$letter, ''), "[[", 2))
# make sure letter column contains only one letter
unique(lengths(strsplit(data$letter, '')))
# ... and the second element is always a semicolon
unique(sapply(strsplit(data$letter, ''), "[[", 2))
# make sure letter column contains only one letter
#unique(lengths(strsplit(data$letter, '')))
# ... and the second element is always a semicolon
#unique(sapply(strsplit(data$letter, ''), "[[", 2))
data [, 'letter2' := sapply(tstrsplit(letter, ''), '[[',2)]
# make sure letter column contains only one letter
#unique(lengths(strsplit(data$letter, '')))
# ... and the second element is always a semicolon
#unique(sapply(strsplit(data$letter, ''), "[[", 2))
data [, letter2 := sapply(tstrsplit(letter, ''), '[[',2)]
tstrsplit(letter, '')
data
# make sure letter column contains only one letter
#unique(lengths(strsplit(data$letter, '')))
# ... and the second element is always a semicolon
#unique(sapply(strsplit(data$letter, ''), "[[", 2))
data [, letter2 := sapply(tstrsplit(letter, ''), '[[',1)]
sapply(tstrsplit(data$letter, ''), '[[',1)
sapply(strsplit(data$letter, ''), '[[',1)
data [, letter2 := strsplit(letter, '')]
data
# make sure letter column contains only one letter
#unique(lengths(strsplit(data$letter, '')))
# ... and the second element is always a semicolon
#unique(sapply(strsplit(data$letter, ''), "[[", 2))
data [, letter2 := sapply(strsplit(letter, ''), '[[',1)]
data
data <- fread('input.txt', header = F)
colnames(data) <- c('range', 'sug.letter', 'password')
unique(lengths(strsplit(data$range, '-')))
# make sure all ranges contain 2 numbers
# unique(lengths(strsplit(data$range, '-')))
data[, c("min", "max") := tstrsplit(range, "-")]
unique(lengths(strsplit(data$sug.letter, '')))
unique(sapply(strsplit(data$sug.letter, ''), "[[", 2))
# make sure letter column contains only one letter
#unique(lengths(strsplit(data$sug.letter, '')))
# ... and the second element is always a semicolon
#unique(sapply(strsplit(data$sug.letter, ''), "[[", 2))
data [, letter := sapply(strsplit(sug.letter, ''), '[[',1)]
data
data [, c('range', 'sug.letter') := NULL]
data
### PART ONE
data [, num.occurrences := length(grep (letter, strsplit(password)))]
### PART ONE
data [, num.occurrences := length(grep (letter, strsplit(password, '')))]
strsplit(data$password, '')
strsplit(data$password [1], '')
strsplit(data$password [[1]], '')
strsplit(data$password [[1]]1, '')
strsplit(data$password [[1]]1, '')
strsplit(data$password [[1]][1], '')
strsplit(data$password [1], '')
grep('n', strsplit(data$password [1], ''))
grepa('n', strsplit(data$password [1], ''))
agrep('n', strsplit(data$password [1], ''))
grepl('n', strsplit(data$password [1], ''))
which (strsplit(data$password [1]=='n')
which (strsplit(data$password [1])=='n')
which (strsplit(data$password [1], '')=='n')
x <- data$password [1]
lengths(regmatches(x, gregexpr("n", x)))
gregexpr("n", x)
regmatches(x, gregexpr("n", x))
lengths(regmatches(x, gregexpr("n", x)))
length(regmatches(x, gregexpr("n", x)))
data [, num.occurrences := lengths(regmatches(password, gregexpr(letter, password))) ]
data
data$password [1]
strsplit(data$password [1])
strsplit(data$password [1], '')
strsplit(data$password [1], '') [[1]]
which(strsplit(data$password [1], '') [[1]]=='n')
length(which(strsplit(data$password [1], '') [[1]]=='n'))
data [, num.occurrences := length(which(strsplit(data$password, '') [[1]]==letter))]
data [, num.occurrences := length(which(strsplit(password, '') [[1]]==letter))]
data
data [, num.occurrences := length(strsplit(password, ''))]
data
data [, num.occurrences := length(tstrsplit(password, ''))]
data
data [, num.occurrences := nchar(password)]
data
data [, num.occurrences := length(strsplit(password, ''))]
data
data [, num.occurrences := length(tstrsplit(password, ''))]
data
data [, num.occurrences := nchar(password)]
max(data$num.occurrences)
table(data$password)
tstrsplit(data$password)
tstrsplit(data$password, '')
strsplit(data$password, '')
do.call (rbind, strsplit(data$password, ''))
strsplit(data$password[1], '')
which (strsplit(data$password[1], '')==1)
which (strsplit(data$password[1], '')[[1]]==1)
which (strsplit(data$password[1], '')[[1]]=='n')
length(which (strsplit(data$password[1], '')[[1]]=='n'))
length(data)
nrow(data)
x <- sapply(1:nrow(data), function (this) {
return (length(which(strsplit(data$password[this], '')[[1]]==data$letter)))
})
warnings()
this <- 1
length(which(strsplit(data$password[this], '')[[1]]==data$letter)))
length(which(strsplit(data$password[this], '')[[1]]==data$letter))
x <- sapply(1:nrow(data), function (this) {
return (length(which(strsplit(data$password[this], '')[[1]]==data$letter[this])))
})
x
### PART ONE
data [, num.occurrences := sapply(1:nrow(data), function (this) {
return (length(which(strsplit(data$password[this], '')[[1]]==data$letter[this])))
})]
data
range (14,16)
14:16
15 %in% 14:16
data [, valid := num.occurrences %in% (min:max)]
15 %in% 14:16
15 %in% 1:2
data [, valid := num.occurrences %in% min:max]
data [, valid := sapply (1:nrow (data), function (this) {
ifelse(num.occurrences[this] %in% min[this]:max[this], T, F)
})]
data
sum (data$valid)
paste (sum (data$valid), 'passwords are valid.')
data <- fread('input.txt', header = F)
colnames(data) <- c('range', 'sug.letter', 'password')
# make sure all ranges contain 2 numbers
# unique(lengths(strsplit(data$range, '-')))
data[, c("min", "max") := tstrsplit(range, "-")]
# make sure letter column contains only one letter
#unique(lengths(strsplit(data$sug.letter, '')))
# ... and the second element is always a semicolon
#unique(sapply(strsplit(data$sug.letter, ''), "[[", 2))
data [, letter := sapply(strsplit(sug.letter, ''), '[[',1)]
data [, c('range', 'sug.letter') := NULL]
### PART ONE
data [, num.occurrences := sapply(1:nrow(data), function (this) {
return (length(which(strsplit(data$password[this], '')[[1]]==data$letter[this])))
})]
data [, valid.pt1 := sapply (1:nrow (data), function (this) {
ifelse(num.occurrences[this] %in% min[this]:max[this], T, F)
})]
paste (sum (data$valid.pt1), 'passwords are valid.')
### PART TWO
data
### PART ONE
data [, num.occurrences := sapply(1:nrow(data), function (this) {
return (length(which(strsplit(password[this], '')[[1]]==letter[this])))
})]
data
data$password[1]
strsplit(data$password[1], '')
strsplit(data$password[1], '')[[1]]
strsplit(data$password[2], '')[[1]]
strsplit(data$password[2], '')[[1]] [2,5]
strsplit(data$password[2], '')[[1]] [2]
data
strsplit(data$password[2], '')[[1]] [14]
strsplit(data$password[2], '')[[1]] [15]
a <- c('d', 'h')
a
length(which (a=='d'))
### PART TWO
data [, occurrences.atpositions := sapply(1:nrow(data), function (this) {
split.pw <- strsplit(password[this], '')[[1]]
letters.atpositions <- c(split.pw[min[this], max[this]])
return (length(which (letters.atpositions==letter[this])))
})]
### PART TWO
data [, occurrences.atpositions := sapply(1:nrow(data), function (this) {
split.pw <- strsplit(password[this], '')[[1]]
letters.atpositions <- c(split.pw[min[this]], split.pw[max[this]])
return (length(which (letters.atpositions==letter[this])))
})]
data
this <- 1
split.pw <- strsplit(data$password[this], '')[[1]]
split.pw
letters.atpositions <- c(split.pw[data$min[this]], split.pw[data$max[this]])
letters.atpositions
data$min[this]
letters.atpositions <- c(split.pw[data$min[this]], split.pw[data$max[this]])
letters.atpositions
data [, c('min', 'max') := as.integer()]
data <- fread('input.txt', header = F)
colnames(data) <- c('range', 'sug.letter', 'password')
# make sure all ranges contain 2 numbers
# unique(lengths(strsplit(data$range, '-')))
data[, c("min", "max") := as.integer(tstrsplit(range, "-"))]
# make sure letter column contains only one letter
#unique(lengths(strsplit(data$sug.letter, '')))
# ... and the second element is always a semicolon
#unique(sapply(strsplit(data$sug.letter, ''), "[[", 2))
data [, letter := sapply(strsplit(sug.letter, ''), '[[',1)]
data [, c('range', 'sug.letter') := NULL]
### PART ONE
data [, num.occurrences := sapply(1:nrow(data), function (this) {
return (length(which(strsplit(password[this], '')[[1]]==letter[this])))
})]
data [, valid.pt1 := sapply (1:nrow (data), function (this) {
ifelse(num.occurrences[this] %in% min[this]:max[this], T, F)
})]
paste (sum (data$valid.pt1), 'passwords are valid.')
data <- fread('input.txt', header = F)
colnames(data) <- c('range', 'sug.letter', 'password')
# make sure all ranges contain 2 numbers
# unique(lengths(strsplit(data$range, '-')))
data[, c("min", "max") := tstrsplit(range, "-")]
data [, c('min', 'max') := sapply(as.integer)]
data [, c('min', 'max') := sapply(c('min', 'max'), as.integer)]
data [, c('min', 'max') := sapply(c('min', 'max', as.integer)]
data [['min']]
data <- fread('input.txt', header = F)
colnames(data) <- c('range', 'sug.letter', 'password')
# make sure all ranges contain 2 numbers
# unique(lengths(strsplit(data$range, '-')))
data[, c("min", "max") := tstrsplit(range, "-")]
sapply(c('min', 'max'), function (thiscol) {
data [[thiscol]] <- as.integer(data [[thiscol]])
})
data
data <- fread('input.txt', header = F)
colnames(data) <- c('range', 'sug.letter', 'password')
# make sure all ranges contain 2 numbers
# unique(lengths(strsplit(data$range, '-')))
data[, c("min", "max") := tstrsplit(range, "-")]
invisible(sapply(c('min', 'max'), function (thiscol) {data [[thiscol]] <- as.integer(data [[thiscol]])}))
data [, letter := sapply(strsplit(sug.letter, ''), '[[',1)]
data [, c('range', 'sug.letter') := NULL]
### PART ONE
data [, num.occurrences := sapply(1:nrow(data), function (this) {
return (length(which(strsplit(password[this], '')[[1]]==letter[this])))
})]
data [, valid.pt1 := sapply (1:nrow (data), function (this) {
ifelse(num.occurrences[this] %in% min[this]:max[this], T, F)
})]
paste (sum (data$valid.pt1), 'passwords are valid.')
### PART TWO
data [, occurrences.atpositions := sapply(1:nrow(data), function (this) {
split.pw <- strsplit(password[this], '')[[1]]
letters.atpositions <- c(split.pw[min[this]], split.pw[max[this]])
return (length(which (letters.atpositions==letter[this])))
})]
data
this >- 2
this <- 2
split.pw <- strsplit(password[this], '')[[1]]
split.pw <- strsplit(data$password[this], '')[[1]]
split.pw
letters.atpositions <- c(split.pw[data$min[this]], split.pw[data$max[this]])
letters.atpositions
split.pw[data$min[this]]
data$min
data$min[this]
class(data)
sapply(data, class)
data$min[this]
data <- fread('input.txt', header = F)
colnames(data) <- c('range', 'sug.letter', 'password')
# make sure all ranges contain 2 numbers
# unique(lengths(strsplit(data$range, '-')))
data[, c("min", "max") := tstrsplit(range, "-")]
invisible(sapply(c('min', 'max'), function (thiscol) {data [[thiscol]] <- as.integer(data [[thiscol]])}))
# make sure letter column contains only one letter
#unique(lengths(strsplit(data$sug.letter, '')))
# ... and the second element is always a semicolon
#unique(sapply(strsplit(data$sug.letter, ''), "[[", 2))
data [, letter := sapply(strsplit(sug.letter, ''), '[[',1)]
data [, c('range', 'sug.letter') := NULL]
### PART ONE
data [, num.occurrences := sapply(1:nrow(data), function (this) {
return (length(which(strsplit(password[this], '')[[1]]==letter[this])))
})]
data [, valid.pt1 := sapply (1:nrow (data), function (this) {
ifelse(num.occurrences[this] %in% min[this]:max[this], T, F)
})]
paste (sum (data$valid.pt1), 'passwords are valid.')
sapply(data, class)
library(data.table)
data <- fread('input.txt', header = F)
colnames(data) <- c('range', 'sug.letter', 'password')
# make sure all ranges contain 2 numbers
# unique(lengths(strsplit(data$range, '-')))
data[, c("min", "max") := tstrsplit(range, "-")]
# make sure letter column contains only one letter
#unique(lengths(strsplit(data$sug.letter, '')))
# ... and the second element is always a semicolon
#unique(sapply(strsplit(data$sug.letter, ''), "[[", 2))
data [, letter := sapply(strsplit(sug.letter, ''), '[[',1)]
data [, c('range', 'sug.letter') := NULL]
### PART ONE
data [, num.occurrences := sapply(1:nrow(data), function (this) {
return (length(which(strsplit(password[this], '')[[1]]==letter[this])))
})]
data [, valid.pt1 := sapply (1:nrow (data), function (this) {
ifelse(num.occurrences[this] %in% min[this]:max[this], T, F)
})]
paste (sum (data$valid.pt1), 'passwords are valid.')
### PART TWO
invisible(sapply(c('min', 'max'), function (thiscol) {data [[thiscol]] <- as.integer(data [[thiscol]])}))
data [, occurrences.atpositions := sapply(1:nrow(data), function (this) {
split.pw <- strsplit(password[this], '')[[1]]
letters.atpositions <- c(split.pw[min[this]], split.pw[max[this]])
return (length(which (letters.atpositions==letter[this])))
})]
data
### PART TWO
#invisible(sapply(c('min', 'max'), function (thiscol) {data [[thiscol]] <- as.integer(data [[thiscol]])}))
data [, occurrences.atpositions := sapply(1:nrow(data), function (this) {
split.pw <- strsplit(password[this], '')[[1]]
letters.atpositions <- c(split.pw[as.integer(min[this])], split.pw[as.integer(max[this])])
return (length(which (letters.atpositions==letter[this])))
})]
data
this <- 4
strsplit(data$password[this])
strsplit(data$password[this], '')
strsplit(data$password[this], '')[[1]]
data
data[occurrences.atpositions==1]
paste (nrow(data[occurrences.atpositions==1]), 'passwords are valid.')
