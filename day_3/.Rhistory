data <- fread('input.txt', header = F)
library(data.table)
data <- fread('input.txt', header = F)
library(data.table)
data <- fread('input.txt', header = F)
data
strsplit(data$V1, '')
x <- as.matrix(strsplit(data$V1, ''))
x
x <- strsplit(data$V1, '')
x
unlist)x
unlist(x)
nchar(data$V1)
unique(nchar(data$V1))
x <- unlist(strsplit(data$V1, ''))
x
x <- matrix(unlist(strsplit(data$V1, '')), ncol=unique(nchar(data$V1)))
x
data <- matrix(unlist(strsplit(data$V1, '')), ncol=unique(nchar(data$V1)))
data <- fread('input.txt', header = F)
data
data <- matrix(unlist(strsplit(data$V1, '')), ncol=unique(nchar(data$V1)))
data
data <- fread('input.txt', header = F)
x
x <- matrix(unlist(strsplit(data$V1, '')), ncol=unique(nchar(data$V1)))
data
x [1:10]
x [1:10, 1:10]
data <- fread('input.txt', header = F)
x <- t(matrix(unlist(strsplit(data$V1, '')), ncol=unique(nchar(data$V1))))
data
x
data <- fread('input.txt', header = F)
unlist(strsplit(data$V1, ''))
x <- do.call (rbind, unlist(strsplit(data$V1, '')))
x <- do.call (rbind, strsplit(data$V1, ''))
data
x
data [1:10]
x [1:10, 1:10]
x [1:10,]
data
data[7]
data[1:10]
data <- fread('input.txt', header = F)
x <- do.call (rbind, strsplit(data$V1, ''))
x
matr <- do.call (rbind, strsplit(data$V1, ''))
rm (x)
nrow (matr)
y <- 1
while (x > 3) {print (x)}
while (y < 3) {y <- y+1; print (y)}
y <- 1
while (y > nrow (matr)) {
}
x <- 1
x
y
matr
a <- ifelse(matr=='.', 0, 1)
a
matr
matr <- ifelse(matr=='.', 0, 1)
matr
matr [1,1]
matr [1,14]
matr [1,15]
matr [1,16]
matr [1,13]
matr [1,17]
matr [1,18]
matr
matr [1,1]
matr [1,1] <- matr[1,1] +1
matr [1,1]
matr[1,1] +1
matr [1,1]
data <- fread('input.txt', header = F)
matr <- do.call (rbind, strsplit(data$V1, ''))
matr <- ifelse(matr=='.', 0, 1)
x <- 1
y <- 1
1 < 2
1 < 1
1 <= 1
ncol(matr)
3*10
3*11
data <- fread('input.txt', header = F)
matr <- do.call (rbind, strsplit(data$V1, ''))
matr <- ifelse(matr=='.', 0, 1)
x <- 1
y <- 1
while (y <= nrow (matr)) {
matr [x,y] <- matr[x,y] + 1
x <- x + 3
y <- y + 1
if (x > ncol(matr)) {
x <- x - ncol(matr)
}
}
data <- fread('input.txt', header = F)
matr <- do.call (rbind, strsplit(data$V1, ''))
matr
data <- fread('input.txt', header = F)
matr <- do.call (rbind, strsplit(data$V1, ''))
matr <- ifelse(matr=='.', 0, 1)
x <- 1
y <- 1
while (y <= nrow (matr)) {
matr [x,y] <- matr[x,y] + 1
x <- x + 3
y <- y + 1
if (x > ncol(matr)) {
x <- x - ncol(matr)
}
print (c(x,y))
}
ncol (matr)
x <- 1
y <- 32
matr[1,32]
matr[1,31]
matr
data <- fread('input.txt', header = F)
matr <- do.call (rbind, strsplit(data$V1, ''))
matr <- ifelse(matr=='.', 0, 1)
x <- 1
y <- 1
while (y <= nrow (matr)) {
matr [y,x] <- matr[y,x] + 1
x <- x + 3
y <- y + 1
if (x > ncol(matr)) {
x <- x - ncol(matr)
}
}
which (matr==2)
length(which (matr==2))
paste(length(which (matr==2)), 'trees are encountered.')
slopes <- list (c(1,1), c(3,1), c(5,1), c(7,1), c(1,2))
slopes
length(slopes)
slopes[[1]]
slopes[[2]]
slopes[2]
slopes[[2]]
slopes[[2]][1]
lapply(slopes, function (this.slope) {
print (this.slope)
})
lapply(slopes, function (this.slope) {
print (this.slope[1])
})
lapply(slopes, function (this.slope) {
return (this.slope[1])
})
lapply(slopes, function (this.slope) {
return (this.slope[2])
})
results <- lapply(slopes, function (this.slope) {
matr <- ifelse(data=='.', 0, 1)
x <- 1
y <- 1
while (y <= nrow (matr)) {
matr [y,x] <- matr[y,x] + 1
x <- x + this.slope[1]
y <- y + this.slope[2]
if (x > ncol(matr)) {
x <- x - ncol(matr)
}
}
return(length(which (matr==2)))
})
results <- lapply(slopes, function (this.slope) {
matr <- ifelse(data=='.', 0, 1)
print (this.slope)
x <- 1
y <- 1
while (y <= nrow (matr)) {
matr [y,x] <- matr[y,x] + 1
x <- x + this.slope[1]
y <- y + this.slope[2]
if (x > ncol(matr)) {
x <- x - ncol(matr)
}
}
return(length(which (matr==2)))
})
x<-1
y<-1
matr <- ifelse(data=='.', 0, 1)
while (y <= nrow (matr)) {
matr [y,x] <- matr[y,x] + 1
x <- x + this.slope[1]
y <- y + this.slope[2]
print (x,y)
if (x > ncol(matr)) {
x <- x - ncol(matr)
}
}
this.slope <- c(3,1)
while (y <= nrow (matr)) {
matr [y,x] <- matr[y,x] + 1
x <- x + this.slope[1]
y <- y + this.slope[2]
print (x,y)
if (x > ncol(matr)) {
x <- x - ncol(matr)
}
}
x <- 1
y <- 1
matr <- ifelse(data=='.', 0, 1)
while (y <= nrow (matr)) {
matr [y,x] <- matr[y,x] + 1
x <- x + this.slope[1]
y <- y + this.slope[2]
print (x,y)
if (x > ncol(matr)) {
x <- x - ncol(matr)
}
}
nrow (matr)
y <= nrow (matr)
matr [y,x]
y
matr[2,1]
matr
matr <- ifelse(data=='.', 0, 1)
matr
data
matr <- ifelse(data=='.', 0, 1)
matr
data
data <- fread('input.txt', header = F)
data <- do.call (rbind, strsplit(data$V1, ''))
results <- lapply(slopes, function (this.slope) {
matr <- ifelse(data=='.', 0, 1)
x <- 1
y <- 1
while (y <= nrow (matr)) {
matr [y,x] <- matr[y,x] + 1
x <- x + this.slope[1]
y <- y + this.slope[2]
print (x,y)
if (x > ncol(matr)) {
x <- x - ncol(matr)
}
}
return(length(which (matr==2)))
})
### PART TWO
slopes <- list (c(1,1), c(3,1), c(5,1), c(7,1), c(1,2))
results <- lapply(slopes, function (this.slope) {
matr <- ifelse(data=='.', 0, 1)
x <- 1
y <- 1
while (y <= nrow (matr)) {
matr [y,x] <- matr[y,x] + 1
x <- x + this.slope[1]
y <- y + this.slope[2]
print (x,y)
if (x > ncol(matr)) {
x <- x - ncol(matr)
}
}
return(length(which (matr==2)))
})
data <- fread('input.txt', header = F)
data <- do.call (rbind, strsplit(data$V1, ''))
### PART TWO
slopes <- list (c(1,1), c(3,1), c(5,1), c(7,1), c(1,2))
results <- lapply(slopes, function (this.slope) {
matr <- ifelse(data=='.', 0, 1)
x <- 1
y <- 1
while (y <= nrow (matr)) {
matr [y,x] <- matr[y,x] + 1
x <- x + this.slope[1]
y <- y + this.slope[2]
if (x > ncol(matr)) {
x <- x - ncol(matr)
}
}
return(length(which (matr==2)))
})
results
prod (results)
prod (unlist(results))
prod (1,2,3.4)
6*4
prod (1:4)
prod (1,2,3,4)
unlist(results)
paste ('The product of all trees encountered is', prod (unlist(results)))
